<?php

/* ------------------------------------------- +
 | Hooks                                       |
 + ------------------------------------------- */

/**
 * Implements hook_help().
 */
function commerce_qbo_ui_help() {

}

/**
 * Implements hook_menu().
 */
function commerce_qbo_ui_menu() {
    $items = array();
    $items['admin/commerce/commerce_qbo_ui'] = array(
        'title' => 'QuickBooks',
        'description' => 'Configure data to send to Quickbooks Online.',
        'page callback' => 'commerce_qbo_ui_active_rules',
        'access arguments' => array('administer commerce qbo ui'),
        'file' => 'includes/commerce_qbo_ui.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/commerce/commerce_qbo_ui/rules'] = array(
        'title' => 'Action Rules',
        'description' => 'View and edit all active rules that trigger reports.',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
        'file' => 'includes/commerce_qbo_ui.admin.inc',
    );

    // Add the menu items for the various Rules forms.
    $controller = new RulesUIController();
    $items += $controller->config_menu('admin/commerce/commerce_qbo_ui/rules');

    $items['admin/commerce/commerce_qbo_ui/rules/add'] = array(
        'title' => 'Add a QuickBooks Report rule',
        'description' => 'Adds an additional QuickBooks rule for when a report should be sent.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('commerce_qbo_ui_add_complete_rule_form', 'admin/commerce/commerce_qbo_ui/rules'),
        'access arguments' => array('administer commerce qbo ui'),
        'file path' => drupal_get_path('module', 'rules_admin'),
        'file' => 'rules_admin.inc',
        'type' => MENU_LOCAL_ACTION,
    );
    $items['admin/commerce/commerce_qbo_ui/pending'] = array(
        'title' => 'Pending Reports',
        'description' => 'Lists all pending QuickBooks reports.',
        'page callback' => 'commerce_qbo_ui_pending_reports',
        'access arguments' => array('administer commerce qbo ui staged reports'),
        'file' => 'includes/commerce_qbo_ui.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 1,
    );
    $items['admin/commerce/commerce_qbo_ui/report_types'] = array(
        'title' => 'Report Types',
        'description' => 'Create and manage different report types that will be sent to QuickBooks.',
        'page callback' => 'commerce_qbo_ui_reports_builder',
        'access arguments' => array('administer commerce qbo ui'),
        'file' => 'includes/commerce_qbo_ui.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
    );
    $items['admin/commerce/commerce_qbo_ui/config'] = array(
        'title' => 'Config',
        'description' => 'Configure settings for this module.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('commerce_qbo_ui_config'),
        'access arguments' => array('administer commerce qbo ui'),
        'file' => 'includes/commerce_qbo_ui.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 4,
    );
    $items['admin/commerce/commerce_qbo_ui/logs'] = array(
        'title' => 'Logs',
        'description' => 'Review any messages returned by QuickBooks Online if logging is enabled.',
        'page callback' => 'commerce_qbo_ui_display_logs',
        'access arguments' => array('view commerce qbo ui logs'),
        'file' => 'includes/commerce_qbo_ui.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 5,
    );
    return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_qbo_ui_permission() {
    $perms = array(
        'administer commerce qbo ui' => array(
            'title' => t('Administer Commerce QuickBooks Report rules'),
        ),
        'view commerce qbo ui logs' => array(
            'title' => t('View QuickBooks Report Logs'),
        ),
        'administer commerce qbo ui staged reports' => array(
            'title' => t('Administer Pending Quickbooks Reports'),
        ),
    );

    return $perms;
}

/**
 * Implements hook_forms().
 *
 * Attaches the "add a new rule" form to the commerce qbo ui rules page
 */
function commerce_qbo_ui_forms($form_id, $args) {
    $forms = array();

    $forms['commerce_qbo_ui_add_complete_rule_form'] = array(
        'callback' => 'rules_admin_add_reaction_rule',
    );

    return $forms;
}

/**
 * Implement hook_init().
 *
 * Displays a notification to permitted users that staged reports are awaiting action
 */
function commerce_qbo_ui_init() {
    if(user_access('administer commerce qbo ui staged reports')) {
        if(variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
            $result = db_select('commerce_qbo_ui_staged_report', 'sr')
                ->fields('sr')
                ->condition('deleted', 0, '=')
                ->execute();

            if($result->rowCount()) {
                $message = t("There are QuickBooks reports waiting to be processed, @link to manage them.",
                    array('@link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/pending")));
                drupal_set_message($message, 'warning', FALSE);
            }
        }
    }
}

/* ------------------------------------------- +
 | Rules Actions                               |
 + ------------------------------------------- */

/**
 *
 *
 * @param $order_id
 * @param $report_type
 */
function commerce_qbo_ui_send_report($order_id, $report_type) {
    // If the API isn't set up then we cannot send any reports
    if(!variable_get('commerce_qbo_ui_run')) {
        $message = t("Unable to send a @report report to QuickBooks until the API is fully configured.", array('@report' => $report_type));
        drupal_set_message($message, 'warning', FALSE);

        // Stage the report if the user chose that option
        if(variable_get('commerce_qbo_ui_stage_premature_reports')) {
            commerce_qbo_ui_stage_report($order_id, $report_type);
        }
    }
    else {

    }
}

/**
 * @param $order_id
 * @param $memo
 */
function commerce_qbo_ui_stage_report($order_id, $memo = '') {
    // Warn the user that reports can only be sent with a configured API
    if(!variable_get('commerce_qbo_ui_run', 0)) {
        $message = t('The order has been staged, but you will be unable to send it until the QuickBooks Online API has been fully configured.');
        drupal_set_message($message, 'warning', FALSE);
    }

    // Ensures $memo doesn't exceed the maximum character limit
    if(strlen($memo) > 127) {
        $memo = substr($memo, 0, 123) . '...';
    }

    // Set this order into the staging table
    db_insert('commerce_qbo_ui_staged_report', 'sr')
        ->fields(array(
            'order_id' => $order_id,
            'memo' => $memo,
            'timestamp' => time(),
        ))
        ->execute();

    // Display notification if option is selected
    if(variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
        $message = t("There are QuickBooks reports waiting to be processed, @link to manage them.",
            array('@link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/staged_report")));
        drupal_set_message($message, 'warning', FALSE);
    }
}

/* ------------------------------------------- +
 | Utility Functions                           |
 + ------------------------------------------- */

/**
 * Alter the Add New Rule form to have the tag field filled in with 'commerce qbo'
 *
 * @param $form
 * @param $form_state
 */
function commerce_qbo_ui_form_commerce_qbo_ui_add_complete_rule_form_alter(&$form, &$form_state) {
    unset($form['settings']['help']);
    $form['settings']['tags']['#value'] = 'commerce qbo';
    $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/checkout/rules');
}

/**
 * Checks that the qbo api module tokens are set
 *
 * @return bool
 *   TRUE if all tokens are set, otherwise FALSE
 */
function commerce_qbo_ui_check_tokens() {
    $api_connected = TRUE;

    $tokens = array();
    $tokens[] = variable_get('qbo_api_company_id');
    $tokens[] = variable_get('qbo_api_consumer_key');
    $tokens[] = variable_get('qbo_api_consumer_secret');
    $tokens[] = variable_get('qbo_api_access_token');
    $tokens[] = variable_get('qbo_api_access_secret');

    foreach($tokens as $token) {
        if(empty($token)) {
            $api_connected = FALSE;
            break;
        }
    }

    return $api_connected;
}

/**
 * A function that can be used by each tab to display whether or not the
 * module is ready to send/receive reports.
 */
function commerce_qbo_ui_ready_check() {
    $api_tokens_loaded = commerce_qbo_ui_check_tokens();

    if(!$api_tokens_loaded) {
        $message = t("This module will be unable to send or receive reports to and from QuickBooks Online until all " .
            "API tokens have been supplied to the qbo_api module. Please set them !url", array('!url' => l(t('here'), "admin/config/services/qbo")));
        drupal_set_message($message, 'warning', FALSE);

        // The module is not allowed to try to process reports
        variable_set('commerce_qbo_ui_run', 0);
    }
    else {
        // The module is ready to process reports
        variable_set('commerce_qbo_ui_run', 1);
    }
}