<?php

/* ------------------------------------------- +
 | Hooks                                       |
 + ------------------------------------------- */

/**
 * Implements hook_help().
 */
function commerce_qbo_ui_help() {

}

/**
 * Implements hook_menu().
 */
function commerce_qbo_ui_menu() {
  $items = array();
  $items['admin/commerce/commerce_qbo_ui'] = array(
    'title' => 'QuickBooks',
    'description' => 'Configure data to send to Quickbooks Online.',
    'page callback' => 'commerce_qbo_ui_active_rules',
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/commerce_qbo_ui/rules'] = array(
    'title' => 'Action Rules',
    'description' => 'View and edit all active rules that trigger reports.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_qbo_ui.admin.inc',
  );

  // Add the menu items for the various Rules forms.
  $controller = new RulesUIController();
  $items += $controller->config_menu('admin/commerce/commerce_qbo_ui/rules');

  $items['admin/commerce/commerce_qbo_ui/rules/add'] = array(
    'title' => 'Add a QuickBooks Report rule',
    'description' => 'Adds an additional QuickBooks rule for when a report should be sent.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_add_complete_rule_form', 'admin/commerce/commerce_qbo_ui/rules'),
    'access arguments' => array('administer commerce qbo ui'),
    'file path' => drupal_get_path('module', 'rules_admin'),
    'file' => 'rules_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/commerce/commerce_qbo_ui/pending'] = array(
    'title' => 'Pending Reports',
    'description' => 'Lists all pending QuickBooks reports.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_pending_reports'),
    'access arguments' => array('administer commerce qbo ui staged reports'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/commerce/commerce_qbo_ui/report_types'] = array(
    'title' => 'Report Types',
    'description' => 'Create and manage different report types that will be sent to QuickBooks.',
    'page callback' => 'commerce_qbo_ui_reports_builder',
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/commerce/commerce_qbo_ui/config'] = array(
    'title' => 'Config',
    'description' => 'Configure settings for this module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_config'),
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['admin/commerce/commerce_qbo_ui/logs'] = array(
    'title' => 'Logs',
    'description' => 'Review any messages returned by QuickBooks Online if logging is enabled.',
    'page callback' => 'commerce_qbo_ui_display_logs',
    'access arguments' => array('view commerce qbo ui logs'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_qbo_ui_permission() {
  $perms = array(
    'administer commerce qbo ui' => array(
      'title' => t('Administer Commerce QuickBooks Report rules'),
      'restrict access' => TRUE,
    ),
    'view commerce qbo ui logs' => array(
      'title' => t('View QuickBooks Report Logs'),
    ),
    'administer commerce qbo ui staged reports' => array(
      'title' => t('Administer Pending Quickbooks Reports'),
      'restrict access' => TRUE,
    ),
    'view commerce qbo ui messages' => array(
      'title' => t('View messages displayed by the module'),
      'description' => t('Displays information regarding report statuses on the page.  This should be limited to employees/site admins.'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_forms().
 *
 * Attaches the "add a new rule" form to the commerce qbo ui rules page
 */
function commerce_qbo_ui_forms($form_id, $args) {
  $forms = array();

  $forms['commerce_qbo_ui_add_complete_rule_form'] = array(
    'callback' => 'rules_admin_add_reaction_rule',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Add New Rule form to have the tag field filled in with 'commerce qbo'
 *
 * @param $form
 * @param $form_state
 */
function commerce_qbo_ui_form_commerce_qbo_ui_add_complete_rule_form_alter(&$form, &$form_state) {
  unset($form['settings']['help']);
  $form['settings']['tags']['#value'] = 'commerce qbo';
  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/commerce_qbo_ui/rules');
}

/**
 * Implement hook_init().
 *
 * Displays a notification to permitted users that staged reports are awaiting action
 */
function commerce_qbo_ui_init() {
  if(user_access('administer commerce qbo ui staged reports')) {
    if(variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
      // We don't need to display the alert on the staged reports page
      if($_GET['q'] != 'admin/commerce/commerce_qbo_ui/pending') {
        $result = db_select('commerce_qbo_ui_staged_report', 'sr')
          ->fields('sr')
          ->condition('deleted', 0, '=')
          ->execute();

        if($result->rowCount() && user_access('view commerce qbo ui messages') && user_is_logged_in()) {
          $message = t("There are QuickBooks reports waiting to be processed, !link to manage them.",
            array('!link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/pending")));
          drupal_set_message($message, 'warning', FALSE);
        }
      }
    }
  }
}

/**
 * Implement hook_theme().
 */
function commerce_qbo_ui_theme() {
  return array(
    'commerce_qbo_ui_staged_reports_table' => array(
      'render element' => 'form',
    ),
  );
}

/* ------------------------------------------- +
 | Theme functions                             |
 + ------------------------------------------- */

function theme_commerce_qbo_ui_staged_reports_table(&$variables) {
  $form = $variables['form'];

  $header = array(
    '#',
    t('Order'),
    t('Memo'),
    t('Report Type'),
    t('Operations'),
  );

  $rows = array();
  $unrendered_rows = $form['rows'];

  // Traverse each row.  @see element_chidren().
  foreach (element_children($unrendered_rows) as $row_index) {
    $row = array();

    // Traverse each column in the row.  @see element_children().
    foreach (element_children($unrendered_rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($unrendered_rows[$row_index][$col_index]);
    }

    // Add the row to the table.
    $rows[] = $row;
  }

  $table_attributes = array(
    'id' => 'commerce_qbo_ui_staged_reports_table',
    'class' => 'commerce_qbo_ui_table',
  );

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => $table_attributes,
    'empty' => t('No reports pending.'),
  ));
}

/* ------------------------------------------- +
 | Rules Actions                               |
 + ------------------------------------------- */

/**
 *
 *
 * @param $order
 * @param $report_type
 */
function commerce_qbo_ui_send_report($order, $report_type) {
  // We need to verify that the passed in parameter is the correct type
  $order = commerce_qbo_ui_check_order($order);

  // If the API isn't set up then we cannot send any reports
  if(!variable_get('commerce_qbo_ui_run')) {
    if(user_access('view commerce qbo ui messages')) {
      $message = t("Unable to send a !report report to QuickBooks until the API is fully configured.", array('!report' => $report_type));
      drupal_set_message($message, 'warning', FALSE);
    }

    // Stage the report if the user chose that option
    if(variable_get('commerce_qbo_ui_stage_premature_reports')) {
      commerce_qbo_ui_stage_report($order, $report_type);
    }
  }
  else if($order === FALSE) {
    $message = t('Failed to send report.  A valid order object or ID is required, please review your Commerce QBO UI rules.');
    watchdog('commerce_qbo_ui', $message, WATCHDOG_ERROR);
  }
  else {
    //@TODO: parse out report type data and order data and send to QuickBooks
  }
}

/**
 * @param $order
 * @param $memo
 */
function commerce_qbo_ui_stage_report($order, $memo = '') {
  // We need to verify that the passed in parameter is the correct type
  $order = commerce_qbo_ui_check_order($order);

  if($order === FALSE) {
    $message = t('Failed to store order data.  A valid order object or ID is required, please review your Commerce QBO UI rules.');
    watchdog('commerce_qbo_ui', $message, WATCHDOG_ERROR);
  }
  else {
    // Warn the user that reports can only be sent with a configured API
    if(!variable_get('commerce_qbo_ui_run', 0) && user_access('view commerce qbo ui messages')) {
      $message = t('The order has been staged, but you will be unable to send it until the QuickBooks Online API has been fully configured.');
      drupal_set_message($message, 'warning', FALSE);
    }

    // We only want strings to be passed in
    if(!is_string($memo)) {
      $memo = "Staged order";
    }

    // Ensures $memo doesn't exceed the maximum character limit
    if(strlen($memo) > 127) {
      $memo = substr($memo, 0, 123) . '...';
    }

    // Set this order into the staging table
    db_insert('commerce_qbo_ui_staged_report')
      ->fields(array(
        'order_id' => $order,
        'memo' => $memo,
        'timestamp' => time(),
      ))
      ->execute();

    // Display notification if option is selected
    if(variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
      $message = t("There are QuickBooks reports waiting to be processed, !link to manage them.",
        array('!link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/staged_report")));
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

/* ------------------------------------------- +
 | AJAX Callbacks                              |
 + ------------------------------------------- */

/**
 * AJAX callback for
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function commerce_qbo_ui_get_sr_row($form, &$form_state) {
  // Make sure any messages don't show up inside the table
  drupal_get_messages();

  return $form;
}

/* ------------------------------------------- +
 | Utility Functions                           |
 + ------------------------------------------- */

/**
 * Returns the rows to be inserted into the Staged Report table.
 *
 * @param DatabaseStatementInterface $reports
 *   A query containing staged reports
 *   Fields: rid, order_id, memo
 * @param SDatabaseStatementInterface $types
 *   A query containing report types
 *   Fields: rtid, name
 *
 * @return array
 *   An array of rows containing table cell data and op buttons
 */
function _commerce_qbo_ui_generate_sr_rows(DatabaseStatementInterface $reports, DatabaseStatementInterface $types) {
  $rows = array();
  $report_type_options = array();
  $default_report_type = 'empty';

  // Mark whether or not "submit" buttons should be enabled
  $active = variable_get('commerce_qbo_ui_run', 0);

  // Generate select list options of report types
  if($types->rowCount()) {
    while($report_type = $types->fetchAssoc()) {
      $report_type_options[$report_type['rtid']] = $report_type['name'];

      if($default_report_type == 'empty') {
        $default_report_type = $report_type['rtid'];
      }
    }
  }
  else {
    // Even if we're ready to run, we can't submit reports without a report type
    $report_type_options['empty'] = "No report types available";
    $active = FALSE;
  }

  // Only generate rows if we actually have pending reports
  if($reports->rowCount()) {
    $row_delta = 1;
    while($pending = $reports->fetchAssoc()) {
      $order_id = $pending['order_id'];
      $memo = $pending['memo'];
      $rid = $pending['rid'];

      $row = array();

      // Set the row number
      $row[] = array(
        '#markup' => $row_delta,
      );

      // Set the link to the order
      $order_link = l($order_id, 'admin/commerce/orders/' . $order_id);
      $row[] = array(
        '#markup' => $order_link,
      );

      $row[] = array(
        '#markup' => t('!memo', array('!memo' => $memo))
      );

      // The select list of report types
      $row['commerce_qbo_ui_report_types'] = array(
        '#title' => 'Report Types',
        '#title_display' => 'invisible',
        '#type' => 'select',
        '#options' => $report_type_options,
        '#default_value' => $default_report_type,
      );

      // Add Remove and Submit buttons
      $row[] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('commerce-qbo-ui-sr-operations')),
        'commerce_qbo_ui_delete_sr' => array(
          '#type' => 'button',
          '#value' => 'Remove',
          '#name' => 'commerce_qbo_ui_remove_' . $rid,
          '#ajax' => array(
            'wrapper' => 'commerce_qbo_ui_staged_reports_table',
            'callback' => 'commerce_qbo_ui_get_sr_row',
          ),
        ),
        'commerce_qbo_ui_submit_sr' => array(
          '#type' => 'button',
          '#value' => 'Submit',
          '#name' => 'commerce_qbo_ui_submit_' . $rid,
          '#disabled' => $active ? FALSE : TRUE,
          '#ajax' => array(
            'wrapper' => 'commerce_qbo_ui_staged_reports_table',
            'callback' => 'commerce_qbo_ui_get_sr_row',
          ),
        ),
      );

      // Increment delta
      $row_delta++;

      // Append row
      $rows[] = $row;
    }
  }

  return $rows;
}

/**
 * Marks the given Staged Report as deleted
 *
 * @param $id
 */
function _commerce_qbo_ui_clear_sr_by_id($id) {
  // Update the 'delete' column to a 1 for the report with the given ID
  $result = db_update('commerce_qbo_ui_staged_report')
    ->fields(array('deleted' => 1))
    ->condition('rid', $id, '=')
    ->execute();
}

/**
 * Returns an order_id if the rule action passed a valid value
 *
 * Accepted values:
 *  - Order Object
 *  - Valid Integer order_id
 *  - Valid String value of order_id
 *
 * @param $arg
 *   The value passed through by the rule action
 * @return bool|int
 *   The numeric order_id if a valid input, FALSE otherwise
 */
function commerce_qbo_ui_check_order($arg) {
  $return = FALSE;

  if(is_object($arg)) {
    if(isset($arg->type)) {
      // The argument is an entity wrapper, so we must use raw() to access the data
      if(method_exists($arg->type, 'raw')) {
        if($arg->type->raw() == 'commerce_order') {
          $return = $arg->order_id->raw();
        }
      }
      // The argument is a regular object, we can access the fields directly
      else if($arg->type == 'commerce_order') {
        $return = $arg->order_id;
      }
    }
  }
  else if(is_int($arg) || is_string($arg)) {
    $arg *= 1;
    if(commerce_order_load($arg)) {
      $return = $arg;
    }
  }

  return $return;
}

/**
 * Checks that the qbo api module tokens are set
 *
 * @return bool
 *   TRUE if all tokens are set, otherwise FALSE
 */
function _commerce_qbo_ui_check_tokens() {
  $api_connected = TRUE;

  $tokens = array();
  $tokens[] = variable_get('qbo_api_company_id');
  $tokens[] = variable_get('qbo_api_consumer_key');
  $tokens[] = variable_get('qbo_api_consumer_secret');
  $tokens[] = variable_get('qbo_api_access_token');
  $tokens[] = variable_get('qbo_api_access_secret');

  foreach($tokens as $token) {
    if(empty($token)) {
      $api_connected = FALSE;
      break;
    }
  }

  return $api_connected;
}

/**
 * A function that can be used by each tab to display whether or not the
 * module is ready to send/receive reports.
 */
function commerce_qbo_ui_ready_check() {
  $api_tokens_loaded = _commerce_qbo_ui_check_tokens();

  if(!$api_tokens_loaded) {
    $message = t("This module will be unable to send or receive reports to and from QuickBooks Online until all " .
      "API tokens have been supplied to the qbo_api module. Please set them !url", array('!url' => l(t('here'), "admin/config/services/qbo")));
    drupal_set_message($message, 'warning', FALSE);

    // The module is not allowed to try to process reports
    variable_set('commerce_qbo_ui_run', 0);
  }
  else {
    // The module is ready to process reports
    variable_set('commerce_qbo_ui_run', 1);
  }
}