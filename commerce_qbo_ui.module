<?php

/* ------------------------------------------- +
 | Hooks                                       |
 + ------------------------------------------- */

/**
 * Implements hook_help().
 */
function commerce_qbo_ui_help($path, $arg) {
  switch($path) {
    case 'admin/help/commerce_qbo_ui':
      $filepath = dirname(__FILE) . '/README.txt';

      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }

      if (!isset($readme)) {
        return NULL;
      }

      $output = '<pre>' . $readme . '</pre>';

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function commerce_qbo_ui_menu() {
  $items = array();
  $items['admin/commerce/commerce_qbo_ui'] = array(
    'title' => 'QuickBooks',
    'description' => 'Configure data to send to Quickbooks Online.',
    'page callback' => 'commerce_qbo_ui_active_rules',
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/commerce_qbo_ui/rules'] = array(
    'title' => 'Action Rules',
    'description' => 'View and edit all active rules that trigger reports.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_qbo_ui.admin.inc',
  );

  // Add the menu items for the various Rules forms.
  $controller = new RulesUIController();
  $items += $controller->config_menu('admin/commerce/commerce_qbo_ui/rules');

  $items['admin/commerce/commerce_qbo_ui/rules/add'] = array(
    'title' => 'Add a QuickBooks Report rule',
    'description' => 'Adds an additional QuickBooks rule for when a report should be sent.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_add_complete_rule_form', 'admin/commerce/commerce_qbo_ui/rules'),
    'access arguments' => array('administer commerce qbo ui'),
    'file path' => drupal_get_path('module', 'rules_admin'),
    'file' => 'rules_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/commerce/commerce_qbo_ui/pending'] = array(
    'title' => 'Pending Reports',
    'description' => 'Lists all pending QuickBooks reports.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_pending_reports'),
    'access arguments' => array('administer commerce qbo ui staged reports'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/commerce/commerce_qbo_ui/qb_reports'] = array(
    'title' => 'Report Types',
    'description' => 'Create and manage different report types that will be sent to QuickBooks.',
    'page callback' => 'commerce_qbo_ui_reports_overview',
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/commerce/commerce_qbo_ui/qb_reports/add'] = array(
    'title' => 'Select a Report Type',
    'description' => 'Add a new Report to send to QuickBooks.',
    'page callback' => 'commerce_qbo_ui_qb_report_add_page',
    'access arguments' => array('administer commerce qbo ui qb reports'),
    'weight' => 10,
    'file' => 'includes/commerce_qbo_ui.qb_reports.inc',
  );
  foreach (_commerce_qbo_ui_report_types() as $report_type) {
    $items['admin/commerce/commerce_qbo_ui/qb_reports/add/' . $report_type['type']] = array(
      'title' => 'Create !name',
      'title arguments' => array('!name' => $report_type['name']),
      'description' => $report_type['description'],
      'page callback' => 'commerce_qbo_ui_qb_report_form_wrapper',
      'page arguments' => array(commerce_qbo_ui_qb_report_new($report_type['type'])),
      'access arguments' => array('administer commerce qbo ui qb reports'),
      'file' => 'includes/commerce_qbo_ui.qb_reports.inc',
    );
  }
  $items['admin/commerce/commerce_qbo_ui/qb_reports/%qb_report'] = array(
    'title callback' => 'commerce_qbo_ui_qb_report_title',
    'title arguments' => array(4),
    'page callback' => 'commerce_qbo_ui_qb_report_form_wrapper',
    'page arguments' => array(4),
    'access arguments' => array('administer commerce qbo ui qb reports'),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_qbo_ui.qb_reports.inc',
  );
  $items['admin/commerce/commerce_qbo_ui/qb_reports/%qb_report/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/commerce_qbo_ui/qb_reports/%qb_report/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_qbo_ui_qb_report_delete_form_wrapper',
    'page arguments' => array(4),
    'access arguments' => array('administer commerce qbo ui qb reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_qbo_ui.qb_reports.inc',
  );

  $items['admin/commerce/commerce_qbo_ui/config'] = array(
    'title' => 'Config',
    'description' => 'Configure settings for this module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qbo_ui_config_form'),
    'access arguments' => array('administer commerce qbo ui'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  $items['admin/commerce/commerce_qbo_ui/logs'] = array(
    'title' => 'Logs',
    'description' => 'Review any messages returned by QuickBooks Online if logging is enabled.',
    'page callback' => 'commerce_qbo_ui_display_logs',
    'access arguments' => array('view commerce qbo ui logs'),
    'file' => 'includes/commerce_qbo_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * 'admin/commerce/commerce_qbo_ui/qb_reports/add' can't be a LOCAL ACTION by
 * default because menu_get_item() and system_admin_menu_block() will be unable
 * to create the content for qb_report type selection page, so we add an action
 * link to the qb_reports tab manually.
 */
function commerce_qbo_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/commerce/commerce_qbo_ui/qb_reports':
      $item = menu_get_item('admin/commerce/commerce_qbo_ui/qb_reports/add');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_permission().
 */
function commerce_qbo_ui_permission() {
  $perms = array(
    'administer commerce qbo ui' => array(
      'title' => t('Administer Commerce QuickBooks Report rules'),
      'restrict access' => TRUE,
    ),
    'view commerce qbo ui logs' => array(
      'title' => t('View QuickBooks Report Logs'),
    ),
    'administer commerce qbo ui qb reports' => array(
      'title' => t('Create, edit and delete Quickbooks Report types'),
      'restrict access' => TRUE,
    ),
    'administer commerce qbo ui staged reports' => array(
      'title' => t('Administer Pending Quickbooks Reports'),
      'restrict access' => TRUE,
    ),
    'view commerce qbo ui messages' => array(
      'title' => t('View messages displayed by the module'),
      'description' => t('Displays information regarding report statuses on the page.  This should be limited to employees/site admins.'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function commerce_qbo_ui_entity_info() {
  $info = array();

  $info['qb_report'] = array(
    'label' => t('Commerce QuickBooks Report'),
    'module' => 'commerce_qbo_ui',
    'controller class' => 'QBOReportEntityController',
    'base table' => 'commerce_qbo_ui_report',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'rtid',
      'label' => 'name',
      'bundle' => 'report_type',
    ),
    'bundle keys' => array(
      'bundle' => 'report_type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (_commerce_qbo_ui_report_types() as $type) {
    $info['qb_report']['bundles'][$type['type']] = array(
      'label' => $type['name'],
    );
  }

  return $info;
}

/**
 * Implements hook_flush_caches().
 *
 * Updates/rebuilds fields defined by this module during a cache flush.
 */
function commerce_qbo_ui_flush_caches() {
  module_load_install('commerce_qbo_ui');
  commerce_qbo_ui_configure_entity_fields();
}

/**
 * Implements hook_forms().
 *
 * Attaches the "add a new rule" form to the commerce qbo ui rules page
 */
function commerce_qbo_ui_forms($form_id, $args) {
  $forms = array();

  $forms['commerce_qbo_ui_add_complete_rule_form'] = array(
    'callback' => 'rules_admin_add_reaction_rule',
  );

  return $forms;
}

/**
 * Implements hook_form_alter().
 *
 * Alter the Add New Rule form to have the tag field filled in with 'commerce qbo'
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function commerce_qbo_ui_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_qbo_ui_add_complete_rule_form':
      unset($form['settings']['help']);
      $form['settings']['tags']['#value'] = 'commerce qbo';
      $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/commerce_qbo_ui/rules');
      break;
  }
}

/**
 * Implement hook_init().
 *
 * Displays a notification to permitted users that staged reports are awaiting action
 */
function commerce_qbo_ui_init() {
  if (user_access('administer commerce qbo ui staged reports')) {
    if (variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
      // We don't need to display the alert on the staged reports page
      if ($_GET['q'] != 'admin/commerce/commerce_qbo_ui/pending') {
        $result = db_select('commerce_qbo_ui_staged_report', 'sr')
          ->fields('sr')
          ->condition('deleted', 0, '=')
          ->execute();

        if ($result->rowCount() && user_access('view commerce qbo ui messages') && user_is_logged_in()) {
          $message = t("There are QuickBooks reports waiting to be processed, !link to manage them.",
            array('!link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/pending")));
          drupal_set_message($message, 'warning', FALSE);
        }
      }
    }
  }
}

/**
 * Implement hook_theme().
 */
function commerce_qbo_ui_theme() {
  return array(
    'commerce_qbo_ui_staged_reports_table' => array(
      'render element' => 'form',
    ),
    'commerce_qbo_ui_qb_report_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_qbo_ui.qb_reports.inc',
    ),
  );
}

/* ------------------------------------------- +
 | Theme functions                             |
 + ------------------------------------------- */

/**
 * Theme callback for building the Staged Reports table
 *
 * @param $variables
 * @return string
 */
function theme_commerce_qbo_ui_staged_reports_table(&$variables) {
  $form = $variables['form'];

  $header = array(
    '#',
    t('Order'),
    t('Memo'),
    t('Report Type'),
    t('Operations'),
  );

  $rows = array();
  $unrendered_rows = $form['rows'];

  // Traverse each row.  @see element_chidren().
  foreach (element_children($unrendered_rows) as $row_index) {
    $row = array();

    // Traverse each column in the row.  @see element_children().
    foreach (element_children($unrendered_rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($unrendered_rows[$row_index][$col_index]);
    }

    // Add the row to the table.
    $rows[] = $row;
  }

  $table_attributes = array(
    'id' => 'commerce_qbo_ui_staged_reports_table',
    'class' => 'commerce_qbo_ui_table',
  );

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => $table_attributes,
    'empty' => t('No reports pending.'),
  ));
}

/* ------------------------------------------- +
 | Rules Actions                               |
 + ------------------------------------------- */

/**
 * Callback for commerce_qbo_ui_send_report rule action
 *
 * @see commerce_qbo_ui_rules_action_info().
 *
 * Starts a transaction request with QuickBooks if the module and API are set up
 * correctly and valid data has been passed through.
 *
 * @param $order
 *   The commerce order.  Can be the id or the order object itself
 * @param $rtid
 *   The ID of the report type the transaction will be
 *
 * @return bool
 *   TRANSACTION_SUCCESS or TRANSACTION_FAIL
 */
function commerce_qbo_ui_send_report($order, $rtid) {
  // We need to verify that the passed in parameter is the correct type
  $order_id = commerce_qbo_ui_check_order($order);
  $qb_report = qb_report_load($rtid);

  $success = FALSE;

  // If the API isn't set up then we cannot send any reports
  if (!variable_get('commerce_qbo_ui_run')) {
    if (user_access('view commerce qbo ui messages')) {
      $message = t("Unable to send a !report report to QuickBooks until the API is fully configured.", array('!report' => $qb_report->name));
      drupal_set_message($message, 'warning', FALSE);
    }

    // Stage the report if the user chose that option
    if (variable_get('commerce_qbo_ui_stage_premature_reports')) {
      commerce_qbo_ui_stage_report($order, $qb_report->name);
    }
  }
  else if ($order === FALSE) {
    $message = t('Failed to send report.  A valid order object or ID is required, please review your Commerce QBO UI rules.');
    watchdog('commerce_qbo_ui', $message, array(), WATCHDOG_ERROR);
  }
  else {
    module_load_include('inc', 'commerce_qbo_ui', 'includes/commerce_qbo_ui.qbo_api');
    $success = commerce_qbo_ui_start_txn($order_id, $qb_report);

    if ($success) {
      // Log the status
      commerce_qbo_ui_log_message($qb_report->name . " was sent successfully!");

      if (user_access('view commerce qbo ui messages')) {
        $message = t("@report was sent successfully!", array('@report' => $qb_report->name));
        drupal_set_message($message, 'commerce_qbo_ui', FALSE);
      }

      // Trigger the commerce_qbo_ui_report_sent event
      rules_invoke_event('commerce_qbo_ui_report_sent');
    }
    else {
      // Do Something else
      commerce_qbo_ui_log_message($qb_report->name . " failed to send.");

      if (user_access('view commerce qbo ui messages')) {
        $message = t("Failed to send @report", array('@report' => $qb_report->name));
        drupal_set_message($message, 'commerce_qbo_ui', FALSE);
      }
    }
  }

  return $success;
}

/**
 * Callback for commerce_qbo_ui_stage_report rule action
 *
 * @see commerce_qbo_ui_rules_action_info().
 *
 * Saves an order for future submission to QuickBooks with the desired
 * transaction format.  If the module is not fully configured, users will be
 * unable to submit reports.
 *
 * @param $order
 * @param $memo
 */
function commerce_qbo_ui_stage_report($order, $memo = '') {
  // We need to verify that the passed in parameter is the correct type
  $order = commerce_qbo_ui_check_order($order);

  if ($order === FALSE) {
    $message = t('Failed to store order data.  A valid order object or ID is required, please review your Commerce QBO UI rules.');
    watchdog('commerce_qbo_ui', $message, array(), WATCHDOG_ERROR);
  }
  else {
    // Warn the user that reports can only be sent with a configured API
    if (!variable_get('commerce_qbo_ui_run', 0) && user_access('view commerce qbo ui messages')) {
      $message = t('The order has been staged, but you will be unable to send it until the QuickBooks Online API has been fully configured.');
      drupal_set_message($message, 'warning', FALSE);
    }

    // We only want strings to be passed in
    if (!is_string($memo)) {
      $memo = "Staged order";
    }

    // Ensures $memo doesn't exceed the maximum character limit
    if (strlen($memo) > 127) {
      $memo = substr($memo, 0, 123) . '...';
    }

    // Set this order into the staging table
    db_insert('commerce_qbo_ui_staged_report')
      ->fields(array(
        'order_id' => $order,
        'memo' => $memo,
        'timestamp' => time(),
      ))
      ->execute();

    // Display notification if option is selected
    if (variable_get('commerce_qbo_ui_alert_pending_reports', 0)) {
      $message = t("There are QuickBooks reports waiting to be processed, !link to manage them.",
        array('!link' => l(t('go to the queue'), "admin/commerce/commerce_qbo_ui/pending")));
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

/* ------------------------------------------- +
 | AJAX Callbacks                              |
 + ------------------------------------------- */

/**
 * AJAX callback for
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function commerce_qbo_ui_get_sr_row($form, &$form_state) {
  // Make sure any messages don't show up inside the table
  drupal_get_messages();

  return $form;
}

/* ------------------------------------------- +
 | Entity Controller Functions                 |
 + ------------------------------------------- */

/**
 * Used to return a single qb_report entity to menu items
 *
 * @param $rtid
 * @return bool|mixed
 */
function qb_report_load($rtid) {
  if (empty($rtid)) {
    return FALSE;
  }

  $qb_reports = commerce_qbo_ui_qb_report_load_multiple(array($rtid));
  return $qb_reports ? reset($qb_reports) : FALSE;
}

/**
 * Loads multiple qb_reports by ID
 *
 * @see entity_load()
 *
 * @param array $rtids
 *   The array of qb_report IDs
 *
 * @return bool|mixed
 */
function commerce_qbo_ui_qb_report_load_multiple($rtids = array()) {
  if (empty($rtids)) {
    return FALSE;
  }

  return entity_load('qb_report', $rtids);
}

/**
 * Returns an initialized qb_report object.
 *
 * @param $type
 *   The machine-readable type of the qb_report.
 *
 * @return
 *   A qb_report object with all default fields initialized.
 */
function commerce_qbo_ui_qb_report_new($type = '') {
  return entity_get_controller('qb_report')->create(array('report_type' => $type));
}

/**
 * Saves a qb_report.
 *
 * @param $report
 *   The full qb_report object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_qbo_ui_qb_report_save($report) {
  return entity_get_controller('qb_report')->save($report);
}

/**
 * Deletes a product by ID.
 * Can't be named qb_report_delete due to overlapping hook_ENTITY_TYPE_delete().
 *
 * @param $report_id
 *   The ID of the qb_report to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_qbo_ui_qbreport_delete($report_id) {
  return commerce_qbo_ui_qb_report_delete_multiple(array($report_id));
}

/**
 * Deletes multiple products by ID.
 *
 * @param $report_ids
 *   An array of qb_report IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_qbo_ui_qb_report_delete_multiple($report_ids) {
  return entity_get_controller('qb_report')->delete($report_ids);
}

/**
 * Returns the human readable name of a qb_report bundle by ID
 *
 * @param $rtid
 *   ID of the qb_report entity
 *
 * @return String
 *   A human readable bundle name
 */
function commerce_qbo_ui_get_qb_report_type($rtid) {
  $query = db_select('commerce_qbo_ui_report', 'r');
  $query->leftJoin('commerce_qbo_ui_report_type', 'rt', 'r.report_type = rt.type');
  $result = $query
    ->fields('rt', array('name'))
    ->condition('r.rtid', $rtid, '=')
    ->execute()
    ->fetchAssoc();

  return $result['name'];
}

/**
 * Create an initialized array for a qb_report type
 *
 * @param string $type
 * @param string $name
 * @param string $desc
 * @param string $help
 *
 * @return array
 *   The initialized qb_report type ready to be saved
 */
function commerce_qbo_ui_qb_report_type_new($type = '', $name = '', $desc = '', $help = '') {
  return array(
    'type' => $type,
    'name' => $name,
    'description' => $desc,
    'help' => $help,
  );
}

/**
 * Saves a qb_report type.
 *
 * @see commerce_product_ui.module
 * Overridden function
 *
 * @param $qb_report_type array
 *   The qb_report type array containing the basic properties as initialized in
 *     commerce_qbo_ui_qb_report_type_new().  Supports multiple bundles at once.
 * @param $configure
 *   Boolean indicating whether or not product type configuration should be
 *     performed in the event of a new product type being saved.
 * @param $skip_reset boolean
 *   Boolean indicating whether or not this save should result in product types
 *     being reset and the menu being rebuilt; defaults to FALSE. This is useful
 *     when you intend to perform many saves at once, as menu rebuilding is very
 *     costly in terms of performance.
 *
 * @return object
 *   The return value of the call to drupal_write_record() to save the product
 *     type, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *     the type of query performed to save the product type.
 */
function commerce_qbo_ui_qb_report_type_save($qb_report_type, $configure = TRUE, $skip_reset = FALSE) {
  $qb_report_types = $qb_report_type;

  // If the first descended indexes have string keys then there is only one
  // report type being saved and we need to wrap it in an array
  if (isset($qb_report_type['type'])) {
    $qb_report_types = array($qb_report_type);
  }

  return commerce_qbo_ui_qb_report_type_save_multiple($qb_report_types, $configure, $skip_reset);
}

/**
 * @see commerce_qbo_ui_qb_report_type_save()
 */
function commerce_qbo_ui_qb_report_type_save_multiple($qb_report_type, $configure = TRUE, $skip_reset = FALSE) {
  $ops = array();
  $delta = 0;

  foreach ($qb_report_type as $new_type) {
    $ops[] = drupal_write_record('commerce_qbo_ui_report_type', $new_type);

    // If this is a new product type and the insert did not fail...
    if ($ops[$delta] !== FALSE) {
      // Notify the field API that a new bundle has been created.
      field_attach_create_bundle('qb_report', $new_type['type']);

      // Use this block to configure common fields.
      if ($configure) {
        // No common fields yet
      }
    }

    $delta++;
  }

  // Rebuild the menu to add this product type's menu items.
  if (!$skip_reset) {
    entity_info_cache_clear();
    variable_set('menu_rebuild_needed', TRUE);
  }

  return sizeof($ops) == 1 ? reset($ops) : $ops;
}

/* ------------------------------------------- +
 | Utility Functions                           |
 + ------------------------------------------- */

/**
 * Returns the rows to be inserted into the Staged Report table.
 *
 * @param DatabaseStatementInterface $reports
 *   A query containing staged reports
 *   Fields: rid, order_id, memo
 * @param DatabaseStatementInterface $types
 *   A query containing report types
 *   Fields: rtid, name
 *
 * @return array
 *   An array of rows containing table cell data and op buttons
 */
function _commerce_qbo_ui_generate_sr_rows(DatabaseStatementInterface $reports, DatabaseStatementInterface $types) {
  $rows = array();
  $report_type_options = array();
  $default_report_type = 'empty';

  // Mark whether or not "submit" buttons should be enabled
  $active = variable_get('commerce_qbo_ui_run', 0);

  // Generate select list options of report types
  if ($types->rowCount()) {
    while($report_type = $types->fetchAssoc()) {
      $report_type_options[$report_type['rtid']] = $report_type['name'];

      if ($default_report_type == 'empty') {
        $default_report_type = $report_type['rtid'];
      }
    }
  }
  else {
    // Even if we're ready to run, we can't submit reports without a report type
    $report_type_options['empty'] = "No report types available";
    $active = FALSE;
  }

  // Only generate rows if we actually have pending reports
  if ($reports->rowCount()) {
    $row_delta = 1;
    while($pending = $reports->fetchAssoc()) {
      $order_id = $pending['order_id'];
      $memo = $pending['memo'];
      $rid = $pending['rid'];

      $row = array();

      // Set the row number
      $row[] = array(
        '#markup' => $row_delta,
      );

      // Set the link to the order
      $order_link = l($order_id, 'admin/commerce/orders/' . $order_id);
      $row[] = array(
        '#markup' => $order_link,
      );

      $row[] = array(
        '#markup' => filter_xss($memo),
      );

      // The select list of report types
      $row['commerce_qbo_ui_report_type'] = array(
        '#title' => t('Report Types'),
        '#title_display' => 'invisible',
        '#type' => 'select',
        '#options' => $report_type_options,
        '#default_value' => $default_report_type,
      );

      // Add Remove and Submit buttons
      $row[] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('commerce-qbo-ui-sr-operations')),
        'commerce_qbo_ui_delete_sr' => array(
          '#type' => 'button',
          '#value' => 'Remove',
          '#name' => 'commerce_qbo_ui_remove_' . $rid,
          '#ajax' => array(
            'wrapper' => 'commerce_qbo_ui_staged_reports_table',
            'callback' => 'commerce_qbo_ui_get_sr_row',
          ),
        ),
        'commerce_qbo_ui_submit_sr' => array(
          '#type' => 'button',
          '#value' => 'Submit',
          '#name' => 'commerce_qbo_ui_submit_' . $rid,
          '#disabled' => $active ? FALSE : TRUE,
          '#ajax' => array(
            'wrapper' => 'commerce_qbo_ui_staged_reports_table',
            'callback' => 'commerce_qbo_ui_get_sr_row',
          ),
        ),
      );

      // Increment delta
      $row_delta++;

      // Append row
      $rows[] = $row;
    }
  }

  return $rows;
}

/**
 * Marks the given Staged Report as deleted
 *
 * @param $id
 */
function _commerce_qbo_ui_clear_sr_by_id($id) {
  // Update the 'delete' column to a 1 for the report with the given ID
  $result = db_update('commerce_qbo_ui_staged_report')
    ->fields(array('deleted' => 1))
    ->condition('rid', $id, '=')
    ->execute();
}

/**
 * Returns an order_id if the rule action passed a valid value
 *
 * Accepted values:
 *  - Order Object
 *  - Valid Integer order_id
 *  - Valid String value of order_id
 *
 * @param $arg
 *   The value passed through by the rule action
 * @return bool|int
 *   The numeric order_id if a valid input, FALSE otherwise
 */
function commerce_qbo_ui_check_order($arg) {
  $return = FALSE;

  if (is_object($arg)) {
    if (isset($arg->type)) {
      // The argument is an entity wrapper, so we must use raw() to access the data
      if (method_exists($arg->type, 'raw')) {
        if ($arg->type->raw() == 'commerce_order') {
          $return = $arg->order_id->raw();
        }
      }
      // The argument is a regular object, we can access the fields directly
      elseif ($arg->type == 'commerce_order') {
        $return = $arg->order_id;
      }
    }
  }
  elseif (is_int($arg) || is_string($arg)) {
    $arg *= 1;
    if (commerce_order_load($arg)) {
      $return = $arg;
    }
  }

  return $return;
}

/**
 * Checks that the qbo api module tokens are set
 *
 * @return bool
 *   TRUE if all tokens are set, otherwise FALSE
 */
function _commerce_qbo_ui_check_tokens() {
  $api_connected = TRUE;

  $tokens = array();
  $tokens[] = variable_get('qbo_api_company_id');
  $tokens[] = variable_get('qbo_api_consumer_key');
  $tokens[] = variable_get('qbo_api_consumer_secret');
  $tokens[] = variable_get('qbo_api_access_token');
  $tokens[] = variable_get('qbo_api_access_secret');

  foreach ($tokens as $token) {
    if (empty($token)) {
      $api_connected = FALSE;
      break;
    }
  }

  return $api_connected;
}

/**
 * A function that can be used by each tab to display whether or not the
 * module is ready to send/receive reports.
 */
function commerce_qbo_ui_ready_check() {
  $api_tokens_loaded = _commerce_qbo_ui_check_tokens();

  if (!$api_tokens_loaded) {
    $message = t("This module will be unable to send or receive reports to and from QuickBooks Online until all " .
      "API tokens have been supplied to the qbo_api module. Please set them !url", array('!url' => l(t('here'), "admin/config/services/qbo")));
    drupal_set_message($message, 'warning', FALSE);

    // The module is not allowed to try to process reports
    variable_set('commerce_qbo_ui_run', 0);
  }
  else {
    // The module is ready to process reports
    variable_set('commerce_qbo_ui_run', 1);
  }
}

/**
 * Returns a list of Report types for qb_report entities
 *
 * @return array
 */
function _commerce_qbo_ui_report_types() {

  return db_query('SELECT * FROM {commerce_qbo_ui_report_type}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
}

/**
 * Returns a unique title for QuickBooks Report edit pages
 *
 * @param $qb_report
 *   The QuickBooks Report object passed through the url
 *
 * @return null|string
 */
function commerce_qbo_ui_qb_report_title($qb_report) {
  $query = db_select('commerce_qbo_ui_report_type', 'rt');
  $query->leftJoin('commerce_qbo_ui_report', 'r', 'r.report_type = rt.type');
  $result = $query
    ->fields('rt', array('name'))
    ->condition('rtid', $qb_report->rtid, '=')
    ->execute()
    ->fetchAssoc();

  $qb_report_type = $result['name'];

  return t('@type report: @name', array(
      '@type' => $qb_report_type,
      '@name' => $qb_report->name,
    )
  );
}

/**
 * Saves messages to the database regarding QuickBooks transactions
 *
 * @param mixed $message
 *   A message
 * @param null Exception $e
 *   A possible error passed in by QuickBooks
 */
function commerce_qbo_ui_log_message($message = '', Exception $e = NULL) {
  // Only log messages if the user requests it
  if (!variable_get('commerce_qbo_ui_logging', FALSE)) {
    return;
  }

  // A basic message was passed
  if ($e === NULL && is_string($message)) {
    // Don't need to do anything.  We include this block to avoid triggering
    // the last 'else' statement, which assumes $e != NULL
  }
  elseif($e === NULL && !is_string($message)) {
    // Convert $message to a readable format and save
    $message = print_r($message, TRUE) . '<br/>';
  }
  elseif ($e === NULL && empty($message)) {
    // No message to log, do nothing
    return;
  }
  elseif ($e !== NULL && is_string($message)) {
    $message .= ' [Error message]: ' . $e->getMessage();
  }
  elseif ($e !== NULL && empty($message)) {
    $message = $e->getMessage();
  }
  else {
    if (!is_object($message)) {
      $message = print_r($message, TRUE) . '<br/> ' . $e->getMessage();
    }
    else {
      $message = $e->getMessage();
    }
  }

  // Log the message
  db_insert('commerce_qbo_ui_message_log')
    ->fields(array(
      'message' => $message,
      'timestamp' => REQUEST_TIME,
    ))
    ->execute();
}
